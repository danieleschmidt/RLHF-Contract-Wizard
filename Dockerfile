# RLHF-Contract-Wizard Production Docker Image
# Multi-stage build for optimized production deployment
# Generated by TERRAGON SDLC MASTER PROMPT v4.0 - AUTONOMOUS EXECUTION

# ========================================================================
# Build Stage: Compile dependencies and build assets
# ========================================================================
FROM python:3.12-slim AS builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create build user for security
RUN useradd --create-home --shell /bin/bash builder
USER builder
WORKDIR /home/builder

# Copy requirements first for better caching
COPY requirements.txt requirements-dev.txt ./

# Install Python dependencies in user space
RUN pip install --user --no-cache-dir -r requirements.txt

# ========================================================================
# Production Stage: Optimized runtime image
# ========================================================================
FROM python:3.12-slim AS production

# Install runtime system dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    libgomp1 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create application user for security
RUN useradd --create-home --shell /bin/bash --uid 1000 appuser

# Set up application directory
WORKDIR /app
RUN chown appuser:appuser /app

# Copy Python dependencies from builder
COPY --from=builder --chown=appuser:appuser /home/builder/.local /home/appuser/.local

# Copy application code
COPY --chown=appuser:appuser . .

# Create necessary directories
RUN mkdir -p /app/logs /app/cache /app/tmp && \
    chown -R appuser:appuser /app

# Switch to application user
USER appuser

# Set Python path and environment
ENV PATH="/home/appuser/.local/bin:$PATH"
ENV PYTHONPATH="/app"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Validate installation
RUN python -c "import src.quantum_planner.core; print('âœ… Core modules validated')"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose ports
EXPOSE 8000 9090

# Default command (can be overridden)
CMD ["python", "-m", "uvicorn", "src.api.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker"]

# ========================================================================
# Development Stage: Include development tools
# ========================================================================
FROM production AS development

# Switch back to root for package installation
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    less \
    htop \
    strace \
    && rm -rf /var/lib/apt/lists/*

# Copy development requirements
COPY requirements-dev.txt /tmp/
RUN pip install --no-cache-dir -r /tmp/requirements-dev.txt

# Switch back to application user
USER appuser

# Override command for development
CMD ["python", "-m", "uvicorn", "src.api.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--reload", \
     "--workers", "1"]

# ========================================================================
# Testing Stage: Include test runners and coverage tools
# ========================================================================  
FROM development AS testing

USER root

# Install additional testing tools
RUN pip install --no-cache-dir \
    pytest-xdist \
    pytest-benchmark \
    coverage[toml]

USER appuser

# Override command for testing
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=src", "--cov-report=html"]

# ========================================================================
# Labels and Metadata
# ========================================================================

LABEL maintainer="Terragon Labs <contact@terragonlabs.com>"
LABEL version="1.0.0"
LABEL description="RLHF-Contract-Wizard: JAX library for encoding RLHF reward functions as legally-binding smart contracts"
LABEL org.opencontainers.image.title="RLHF-Contract-Wizard"
LABEL org.opencontainers.image.description="Quantum-inspired task planner with RLHF contract integration"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.vendor="Terragon Labs"
LABEL org.opencontainers.image.licenses="Apache-2.0"
LABEL org.opencontainers.image.source="https://github.com/danieleschmidt/RLHF-Contract-Wizard"