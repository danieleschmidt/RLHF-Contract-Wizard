apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: rlhf-contracts
type: Opaque
data:
  # Base64 encoded values (replace with actual encoded secrets)
  username: cG9zdGdyZXM=  # postgres
  password: Y2hhbmdlbWU=   # changeme
  url: cG9zdGdyZXNxbDovL3Bvc3RncmVzOmNoYW5nZW1lQHBvc3RncmVzOjU0MzIvcmxoZl9jb250cmFjdHM=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: rlhf-contracts
data:
  POSTGRES_DB: rlhf_contracts
  POSTGRES_USER: postgres
  POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: rlhf-contracts
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: rlhf-contracts
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: password
        envFrom:
        - configMapRef:
            name: postgres-config
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -d rlhf_contracts
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -d rlhf_contracts
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: rlhf-contracts
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: rlhf-contracts
data:
  init.sql: |
    -- Initialize RLHF Contracts Database
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS contracts;
    CREATE SCHEMA IF NOT EXISTS monitoring;
    CREATE SCHEMA IF NOT EXISTS audit;
    
    -- Create tables
    CREATE TABLE IF NOT EXISTS contracts.reward_contracts (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        version VARCHAR(50) NOT NULL,
        metadata JSONB NOT NULL,
        stakeholders JSONB NOT NULL DEFAULT '[]'::jsonb,
        constraints JSONB NOT NULL DEFAULT '[]'::jsonb,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(name, version)
    );
    
    CREATE TABLE IF NOT EXISTS monitoring.health_checks (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        check_name VARCHAR(100) NOT NULL,
        status BOOLEAN NOT NULL,
        message TEXT,
        duration_ms FLOAT,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS audit.activity_log (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        entity_type VARCHAR(50) NOT NULL,
        entity_id UUID,
        action VARCHAR(50) NOT NULL,
        details JSONB,
        user_id VARCHAR(100),
        ip_address INET,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Create indexes
    CREATE INDEX IF NOT EXISTS idx_contracts_name ON contracts.reward_contracts(name);
    CREATE INDEX IF NOT EXISTS idx_contracts_created_at ON contracts.reward_contracts(created_at);
    CREATE INDEX IF NOT EXISTS idx_health_checks_timestamp ON monitoring.health_checks(timestamp);
    CREATE INDEX IF NOT EXISTS idx_activity_log_timestamp ON audit.activity_log(timestamp);
    CREATE INDEX IF NOT EXISTS idx_activity_log_entity ON audit.activity_log(entity_type, entity_id);
    
    -- Grant permissions
    GRANT USAGE ON SCHEMA contracts TO postgres;
    GRANT USAGE ON SCHEMA monitoring TO postgres;
    GRANT USAGE ON SCHEMA audit TO postgres;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA contracts TO postgres;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA monitoring TO postgres;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA audit TO postgres;