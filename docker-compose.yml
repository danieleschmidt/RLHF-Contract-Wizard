# RLHF-Contract-Wizard Docker Compose Configuration
# Complete development and production environment setup
# Generated by TERRAGON SDLC MASTER PROMPT v4.0 - AUTONOMOUS EXECUTION

version: '3.8'

services:
  # ========================================================================
  # Core Application Services
  # ========================================================================
  
  # Main RLHF Contract API
  api:
    build:
      context: .
      target: development
    container_name: rlhf-contract-api
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://rlhf_user:rlhf_password@postgres:5432/rlhf_contracts
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - DEBUG=true
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rlhf-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================================================
  # Database Services  
  # ========================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: rlhf-postgres
    environment:
      - POSTGRES_DB=rlhf_contracts
      - POSTGRES_USER=rlhf_user
      - POSTGRES_PASSWORD=rlhf_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./src/database/seeds:/docker-entrypoint-initdb.d/seeds
    networks:
      - rlhf-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rlhf_user -d rlhf_contracts"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rlhf-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - rlhf-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========================================================================
  # Monitoring and Observability
  # ========================================================================
  
  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: rlhf-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - rlhf-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: rlhf-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=rlhf_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - rlhf-network
    restart: unless-stopped

  # ========================================================================
  # Development and Testing Services
  # ========================================================================
  
  # Jupyter Notebook for Research and Development
  jupyter:
    build:
      context: .
      target: development
    container_name: rlhf-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=rlhf_development_token
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
    command: >
      bash -c "pip install jupyterlab ipywidgets &&
               jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
               --NotebookApp.token=rlhf_development_token"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rlhf-network
    restart: unless-stopped

  # Testing Service
  test:
    build:
      context: .
      target: testing
    container_name: rlhf-tests
    environment:
      - ENVIRONMENT=testing
      - DATABASE_URL=postgresql://rlhf_user:rlhf_password@postgres:5432/rlhf_contracts_test
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - .:/app
      - ./test-results:/app/test-results
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rlhf-network
    profiles:
      - testing

  # ========================================================================
  # Blockchain and Smart Contract Services
  # ========================================================================
  
  # Hardhat Ethereum Development Node
  hardhat:
    image: node:18-alpine
    container_name: rlhf-hardhat
    working_dir: /app
    ports:
      - "8545:8545"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    command: >
      sh -c "npm install &&
             npx hardhat node --hostname 0.0.0.0"
    networks:
      - rlhf-network
    restart: unless-stopped

  # ========================================================================
  # Production Services
  # ========================================================================
  
  # Production API (nginx + gunicorn)
  api-prod:
    build:
      context: .
      target: production
    container_name: rlhf-api-prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://rlhf_user:rlhf_password@postgres:5432/rlhf_contracts
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=WARNING
      - DEBUG=false
    volumes:
      - ./logs:/app/logs:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rlhf-network
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    profiles:
      - production

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: rlhf-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - api-prod
    networks:
      - rlhf-network
    profiles:
      - production

# ========================================================================
# Network Configuration
# ========================================================================
networks:
  rlhf-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================================================
# Volume Configuration
# ========================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  node_modules:
    driver: local

# ========================================================================
# Development Commands
# ========================================================================
# 
# Development:
#   docker-compose up api postgres redis
#
# Testing:
#   docker-compose --profile testing up test
#
# Production:
#   docker-compose --profile production up
#
# Jupyter Development:
#   docker-compose up jupyter postgres redis
#
# Full Monitoring Stack:
#   docker-compose up api postgres redis prometheus grafana
#
# Blockchain Development:
#   docker-compose up api postgres redis hardhat
#
# ========================================================================